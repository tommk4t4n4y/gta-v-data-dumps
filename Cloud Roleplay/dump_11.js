{
let lastAntiCheatTimeOut = 0;

class PlayerDeath {
    constructor() {
        this.DietAt = 0;
        this.Reason = 0;
        this.KilledBy = null;
    }

    isPlayerDeath(value) {
        if (value == undefined || value == null) return true;

        if (value <= 0) {
            return true;
        }
        return false;
    }
    setPlayerHealt(value) {
        mp.players.local.setHealth(value * 2);
        return true;
    }
}

var playerDeath = new PlayerDeath();

class WeaponDamageModel {
    constructor(_hash, _name, _damage) {
        this.Hash = _hash;
        this.Name = _name;
        this.Damage = _damage;
    }
    Get() {
        return [this.Hash, this.Name, this.Damage]
    }
}

class WeaponDamager {
    constructor() {
        this.WeaponDamageArray = [];
    }
    GetDamage(hash) {
        let weaponModel = this.WeaponDamageArray.find(x => x.Hash == hash);
        if (weaponModel == null) return 0;
        return weaponModel.Damage;
    }
}

var weaponDamager = new WeaponDamager();

weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(453432689, "weapon_pistol", 9));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3219281620, "weapon_pistol_mk2", 10));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3523564046, "weapon_heavypistol", 9));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2578377531, "weapon_pistol50", 13));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(137902532, "weapon_vintagepistol", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(727643628, "weapon_ceramicpistol", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3249783761, "weapon_revolver", 60));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2441047180, "weapon_navyrevolver", 10));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3220176749, "weapon_assaultrifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2210333304, "weapon_carbinerifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2937143193, "weapon_advancedrifle", 13));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(1649403952, "weapon_compactrifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3231910285, "weapon_specialcarbine", 13));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2526821735, "weapon_specialcarbine_mk2", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(4208062921, "weapon_carbinerifle_mk2", 2));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(736523883, "weapon_smg", 10));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(171789620, "weapon_combatpdw", 10));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(1627465347, "weapon_gusenberg", 11));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(3342088282, "weapon_marksmanrifle", 35));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(487013001, "weapon_pumpshotgun", 3));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2017895192, "weapon_sawnoffshotgun", 4));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2640438543, "weapon_bullpupshotgun", 3));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(94989220, "weapon_combatshotgun", 3));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));
weaponDamager.WeaponDamageArray.push(new WeaponDamageModel(2132975508, "weapon_bullpuprifle", 12));


function checkCanAntiCheat() {
    return lastAntiCheatTimeOut + 7500 < Date.now()
}

mp.events.add('incomingDamage', (sourceEntity, sourcePlayer, targetEntity, weapon, boneIndex, damage) => {
    if (targetEntity.type === 'player' && sourcePlayer) {

        let WeaponDamage = weaponDamager.GetDamage(weapon)

        if (WeaponDamage == 0 || WeaponDamage == undefined) return true;

        if (mp.players.local.getVariable("IS_PLAYER_DEATH") == true) return true;

        targetEntity.applyDamageTo(WeaponDamage, true);

        if (playerDeath.isPlayerDeath((targetEntity.getHealth() + targetEntity.getArmour()))) {
            if (playerDeath.setPlayerHealt(100)) {
                mp.events.callRemote("PlayerDeathEvent", sourcePlayer.name, mp.game.invoke("0x16FFE42AB2D2DC59", mp.players.local.handle))
                lastAntiCheatTimeOut = Date.now();
                playerDeath.DietAt = Date.now();
                playerDeath.KilledBy = "Not Found";
                playerDeath.Reason = "Not Found";
            }
        }
        return true;
    }
});

mp.events.add("render", () => {

    mp.game.gameplay.setFadeOutAfterDeath(false);

    if (mp.players.local.getVariable("IS_PLAYER_DEATH") == true) return;

    if (playerDeath.isPlayerDeath(mp.players.local.getHealth())) {
        setTimeout(() => {
            if (playerDeath.setPlayerHealt(100)) {
                mp.events.callRemote("PlayerDeathEvent", "cloudrp-" + (Math.random() + 1).toString(36).substring(2), mp.game.invoke("0x16FFE42AB2D2DC59", mp.players.local.handle))
                lastAntiCheatTimeOut = Date.now();
                playerDeath.DietAt = Date.now();
                playerDeath.KilledBy = "Not Found";
                playerDeath.Reason = "Not Found";
            }
        }, 375);
    }
});

//Anticheat && toggel detection
mp.events.add("client:AntiCheat:toggleAntiCheatDetection", () => {
    lastAntiCheatTimeOut = Date.now();
})

setTimeout(() => {
    setInterval(() => {
        if (mp.gui.cursor.visible) return;
        let health = mp.players.local.getHealth();
        let vest = mp.players.local.getArmour()
        setTimeout(() => {
            if (mp.players.local.getHealth() + mp.players.local.getArmour() > health + vest) {
                if (!checkCanAntiCheat()) return;
                mp.events.callRemote("Server:AntiCheat:SendHealKeyDetection", Math.floor(health + vest), Math.floor(mp.players.local.getHealth() + mp.players.local.getArmour()));
            }
        }, 50);
    }, 20);
}, 30000);
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































// mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
//     if(targetEntity != null){
//         TracerObject.push({
//             PositionFrom: mp.players.local.position,
//             PositionTo: targetPosition,
//             Name: targetEntity.name,
//             Time: Date.now() + 3000
//         })
//     }
// });

// mp.events.add("render", () => {
//         TracerObject.forEach(element => {
//             mp.game.graphics.drawLine(element.PositionFrom.x, element.PositionFrom.y + 0.15, element.PositionFrom.z + 0.5, element.PositionTo.x, element.PositionTo.y, element.PositionTo.z, 255, 255, 0, 255);
//             mp.game.graphics.drawText(element.Name, [element.PositionFrom.x, element.PositionFrom.y + 0.15, element.PositionFrom.z + 0.5], { font: 0, centre: true, color: [255, 255, 0, 180], scale: [0.2, 0.2], outline: true });

//             if (element.Time < Date.now()) {
//                 var index = TracerObject.findIndex(target => target == element);
//                 TracerObject.splice(index, 1);
//             }        
//         }
//     )
// });

// const TracerObject = []
}